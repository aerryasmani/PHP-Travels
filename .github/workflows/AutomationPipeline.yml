name: GitHub Actions Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  Explore-GitHub-Actions:
    runs-on: ubuntu-latest

    steps:
      - name: Echo triggering event and runner info
        run: |
          echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
          echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
          echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."

      # ... other steps

      - name: List files in the repository
        run: ls ${{ github.workspace }}

      - name: Check job status
        run: echo "üçè This job's status is ${{ job.status }}."

  Check-Site-Availability:
    runs-on: ubuntu-latest
    needs: Explore-GitHub-Actions

    steps:
      - name: Check Site Availability and Content
        id: site_check
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" -I https://phptravels.net)
          if [ "$response" -ne 200 ]; then
            echo "::error::Site is down with HTTP status code $response"
            exit 1
          else
            echo "Site is up with HTTP status code $response"
            content=$(curl -s https://phptravels.net)
            
            # Define the expected content
            expected_content="Your Trip Starts Here! Let us help you plan your next journey ‚Äî the one that will leave a lifetime of memories"
            
            # Loop until the expected content is found or timeout after 30 seconds
            timeout=$((SECONDS + 30))
            while [ $SECONDS -lt $timeout ]; do
              if echo "$content" | grep -q "$expected_content"; then
                echo "Expected content found on the page."
                break
              else
                echo "Expected content not found on the page. Retrying in 1 second..."
                sleep 1
                content=$(curl -s https://phptravels.net)
              fi
            done
            
            # Check if the expected content was not found within the timeout
            if [ $SECONDS -ge $timeout ]; then
              echo "::error::Timeout: Expected content not found on the page after 30 seconds."
              exit 1
            fi
          fi
